name: Validate

# This is supposed to run on all pull requests to ensure
# formal sanity of content, formatting, front matter, and structure.
on:
  pull_request:
    branches:
      - main

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Install dependencies
        run: pip3 install click colored

      - name: Validate front matter for changed files
        run: |
          git fetch --no-tags origin "${GITHUB_BASE_REF}":"${GITHUB_BASE_REF}"
          git diff --name-only "refs/heads/${GITHUB_BASE_REF}" -- . | tee files.txt
          cat files.txt | python3 scripts/validate-front-matter/script.py
          rm files.txt

      - name: Print front matter annotations
        run: cat ./annotations.json

      - name: Send front matter annotations
        uses: giantswarm/annotations-action@8028d6604d2db401d4dcd30c21a99fa26e662544
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          title: Front matter problems
          input: ./annotations.json

      - name: markdownlint
        run: |
          make RUNNING_IN_CI=true lint || true

          # Only fail if the run didn't work for technical reasons
          if [ ! -e markdownlint.out ]; then
            echo "ERROR: Linting did not write output file with findings"
            exit 1
          fi

          # Otherwise create annotations
          cat markdownlint.out \
            | jq -nR '[inputs | (. | capture("(?<filename>[^:]+):(?<line>[0-9]+)(:(?<col>[0-9]+))?\\s+(?<description>.+)") | {"file": .filename, "line": (.line | tonumber), "end_line": (.line | tonumber), "title": "markdownlint problem", "message": .description, "annotation_level": "error"})]' \
            > markdownlint-annotations.json

      - name: Print markdownlint annotations
        run: cat ./markdownlint-annotations.json

      - name: Send markdownlint annotations
        uses: giantswarm/annotations-action@8028d6604d2db401d4dcd30c21a99fa26e662544
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          title: markdownlint problems
          input: ./markdownlint-annotations.json

      - name: Fail if markdownlint had findings
        run: |
          # If there are non-empty lines, we had linting findings
          if [ "$(awk 1 < markdownlint.out | wc -l | awk '{print $1}')" != 0 ]; then
            echo "ERROR: See markdownlint findings (annotated as errors in the PR when you click on 'Files changed')"
            exit 1
          fi

      - name: Check for moved or deleted files
        run: |
          git --no-pager diff --name-status --diff-filter=RD "refs/heads/${GITHUB_BASE_REF}" -- . | tee files.txt
          ls -la files.txt
          if [ -s files.txt ]; then
            # Creat annotations JSON
            while read line; do
              echo "$line"
              parts=($line)
              mode=${parts[0]}
              filename=${parts[1]}
              
              if [ "$mode" == "D" ]; then
                echo "File $filename was deleted"
                echo "{\"file\": \"$filename\", \"line\": 1, \"end_line\": 1, \"title\": \"File deleted\", \"message\": \"File deleted\", \"annotation_level\": \"warning\"}" >> mvdel-annotations.json
              else
                echo "File $filename was moved"
                echo "{\"file\": \"$filename\", \"line\": 1, \"end_line\": 1, \"title\": \"File moved\", \"message\": \"File moved/renamed\", \"annotation_level\": \"warning\"}" >> mvdel-annotations.json
              fi
            done <files.txt
          fi
          rm files.txt

      - name: Send annotations for moved or deleted files
        uses: yuzutech/annotations-action@0e061a6e3ac848299310b6429b60d67cafd4e7f8 # v0.5.0
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          title: Moved or deleted files
          input: ./mvdel-annotations.json
