import sys
from datetime import datetime
from pprint import pprint
from yaml import load, dump, CLoader, CDumper
from github import Github
from os import path, makedirs

print("script.py arguments: %s" % sys.argv)

CONFIG_PATH = sys.argv[1]

# Target path for generated content
CONTENT_PATH = sys.argv[2]

GITHUB_TOKEN = sys.argv[3]


RELEASES_REPO = 'giantswarm/releases'

def get_releases(client, repo_shortname):
    """
    Yields all Github releases in the given repository
    """
    repo = client.get_repo(repo_short)

    for release in repo.get_releases():
        # skip unpublished releases
        if release.published_at is None:
            continue

        yield {
            'repository': repo_short,
            'version_tag': release.tag_name,
            'date': release.published_at,
            'description': release.body,
            'url': release.html_url,
        }

def normalize_version(v):
    """
    Removes a 'v' prefix from the version string
    """
    if v.startswith('v'):
        return v[1:]
    return v

def generate_release_file(repo_config, release):
    """
    Write a release file with YAML front matter and Markdown body
    """
    filepath = path.join(CONTENT_PATH, repo_config['slug'], release['version_tag'] + ".md")
    print(filepath)

    version = normalize_version(release['version_tag'])

    frontmatter = {
        'date': release['date'].isoformat(),
        'description': f'Changelog entry for {release["repository"]} version {version}, published on {release["date"].strftime("%d %B %Y, %H:%M")}',
        'changelog_entry': {
            'repository': release['repository'],
            'version_tag': release['version_tag'],
            'version': normalize_version(release['version_tag']),
            'url': release['url'],
        },
        'tags': [repo_config['tag']],
    }

    content = "---\n"
    content += "# Generated by scripts/aggregate-changelogs. WARNING: Manual edits to this files will be overwritten.\n"
    content += dump(frontmatter, Dumper=CDumper)
    content += "---\n\n"
    content += release['description']
    content += "\n"

    # Ensure directory
    makedirs(path.dirname(filepath), exist_ok=True)
    with open(filepath, 'w') as outfile:
        outfile.write(content)


if __name__ == "__main__":
    with open(CONFIG_PATH, 'rb') as configfile:
        conf = load(configfile, Loader=CLoader)
    
    if GITHUB_TOKEN == "":
        print("ERROR: GitHub token must be given as 3rd argument")
        sys.exit(1)

    g = Github(GITHUB_TOKEN)
    
    for repo_short in conf['repositories']:
        #repo = expand_repo_url(repo_short)
        print(repo_short)
        repo_conf = conf['repositories'][repo_short]
        pprint(repo_conf)

        releases = None
        if repo_short == RELEASES_REPO:
            # TODO: special treatment for releases repo
            pass
        elif repo_conf['source'] == 'CHANGELOG_FILE':
            print("TODO: get CHANGELOG.md for %s" % repo_short)
        elif repo_conf['source'] == 'GITHUB_RELEASES':
            print("TODO: get releases from %s" % repo_short)
            releases = get_releases(g, repo_short)
        else:
            print("ERROR: Invalid source attribute for repo %s" % repo_short)
            sys.exit(1)

        if releases is None:
            continue

        for r in releases:
            generate_release_file(repo_conf, r)
